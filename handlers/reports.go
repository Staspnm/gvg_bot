package handlers

import (
	"fmt"
	"strings"

	"github.com/gvg-bot/models"

	"github.com/gvg-bot/database"
	"gopkg.in/telebot.v3"
)

//func handleMissingReports(c telebot.Context, db *database.Database) error {
//	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–∏—Ü–µ—Ä–æ–º –∏–ª–∏ –≤—ã—à–µ
//	var officer models.User
//	err := db.QueryRow(`
//        SELECT guild_name, guild_role FROM users WHERE telegram_id = $1
//    `, c.Sender().ID).Scan(&officer.GuildName, &officer.GuildRole)
//
//	if err != nil {
//		return c.Send("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
//	}
//
//	if officer.GuildRole != "officer" && officer.GuildRole != "leader" && officer.GuildRole != "owner" {
//		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
//	}
//
//	// –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
//	locations := []string{"T1", "T2", "T3", "T4", "B1", "B2", "B3", "B4", "F1", "F2"}
//
//	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–∏–ª—å–¥–∏–∏
//	rows, err := db.Query(`
//        SELECT game_nickname
//        FROM users
//        WHERE guild_name = $1 AND is_active = TRUE
//        ORDER BY game_nickname
//    `, officer.GuildName)
//
//	if err != nil {
//		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤.")
//	}
//	defer rows.Close()
//
//	var allPlayers []string
//	for rows.Next() {
//		var nickname string
//		if err := rows.Scan(&nickname); err != nil {
//			continue
//		}
//		allPlayers = append(allPlayers, nickname)
//	}
//
//	if len(allPlayers) == 0 {
//		return c.Send("–í –≤–∞—à–µ–π –≥–∏–ª—å–¥–∏–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.")
//	}
//
//	// –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏
//	var result strings.Builder
//	result.WriteString(fmt.Sprintf("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è –≥–∏–ª—å–¥–∏–∏ %s:\n\n", officer.GuildName))
//
//	for _, loc := range locations {
//		// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç—ã –ø–æ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏
//		rows, err := db.Query(`
//            SELECT DISTINCT u.game_nickname
//            FROM battle_results b
//            JOIN users u ON b.user_id = u.id
//            WHERE b.guild_name = $1 AND b.location = $2 AND b.battle_date = CURRENT_DATE
//        `, officer.GuildName, loc)
//
//		if err != nil {
//			continue
//		}
//
//		var reportedPlayers []string
//		for rows.Next() {
//			var nickname string
//			if err := rows.Scan(&nickname); err != nil {
//				continue
//			}
//			reportedPlayers = append(reportedPlayers, nickname)
//		}
//		rows.Close()
//
//		// –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –æ—Ç—á–µ—Ç–æ–≤
//		missingPlayers := findMissingPlayers(allPlayers, reportedPlayers)
//
//		if len(missingPlayers) > 0 {
//			result.WriteString(fmt.Sprintf("üìç <b>%s</b> (%d):\n", loc, len(missingPlayers)))
//			result.WriteString(strings.Join(missingPlayers, ", "))
//			result.WriteString("\n\n")
//		}
//	}
//
//	if result.Len() > 0 {
//		return c.Send(result.String(), telebot.ModeHTML)
//	}
//
//	return c.Send("–í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç—ã –ø–æ –≤—Å–µ–º –ª–æ–∫–∞—Ü–∏—è–º!")
//}
//
//func findMissingPlayers(allPlayers, reportedPlayers []string) []string {
//	reportedMap := make(map[string]bool)
//	for _, p := range reportedPlayers {
//		reportedMap[p] = true
//	}
//
//	var missing []string
//	for _, p := range allPlayers {
//		if !reportedMap[p] {
//			missing = append(missing, p)
//		}
//	}
//	return missing
//}

func handleMissingReports(c telebot.Context, db *database.Database, specificLocation string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –æ—Ñ–∏—Ü–µ—Ä–∞
	var officer models.User
	err := db.QueryRow(`
        SELECT guild_name, guild_role FROM users WHERE telegram_id = $1
    `, c.Sender().ID).Scan(&officer.GuildName, &officer.GuildRole)

	if err != nil {
		return c.Send("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
	}

	if officer.GuildRole != "officer" && officer.GuildRole != "leader" && officer.GuildRole != "owner" {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–∏–ª—å–¥–∏–∏
	rows, err := db.Query(`
        SELECT game_nickname 
        FROM users 
        WHERE guild_name = $1 AND is_active = TRUE
        ORDER BY game_nickname
    `, officer.GuildName)

	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤.")
	}
	defer rows.Close()

	var allPlayers []string
	for rows.Next() {
		var nickname string
		if err := rows.Scan(&nickname); err != nil {
			continue
		}
		allPlayers = append(allPlayers, nickname)
	}

	if len(allPlayers) == 0 {
		return c.Send("–í –≤–∞—à–µ–π –≥–∏–ª—å–¥–∏–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.")
	}

	// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è
	if specificLocation != "" {
		return showMissingForLocation(c, db, officer.GuildName, specificLocation, allPlayers)
	}

	// –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –≤—Å–µ–º –ª–æ–∫–∞—Ü–∏—è–º
	return showAllMissingReports(c, db, officer.GuildName, allPlayers)
}

func showMissingForLocation(c telebot.Context, db *database.Database, guildName, location string, allPlayers []string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ª–æ–∫–∞—Ü–∏–∏
	validLocations := map[string]bool{
		"T1": true, "T2": true, "T3": true, "T4": true,
		"B1": true, "B2": true, "B3": true, "B4": true,
		"F1": true, "F2": true,
	}

	if !validLocations[location] {
		return c.Send("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–æ–∫–∞—Ü–∏—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: T1-T4, B1-B4, F1-F2")
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏—Ö –æ—Ç—á–µ—Ç—ã –ø–æ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏
	rows, err := db.Query(`
        SELECT DISTINCT u.game_nickname
        FROM battle_results b
        JOIN users u ON b.user_id = u.id
        WHERE b.guild_name = $1 AND b.location = $2 AND b.battle_date = CURRENT_DATE
    `, guildName, location)

	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
	}
	defer rows.Close()

	var reportedPlayers []string
	for rows.Next() {
		var nickname string
		if err := rows.Scan(&nickname); err != nil {
			continue
		}
		reportedPlayers = append(reportedPlayers, nickname)
	}

	// –ù–∞—Ö–æ–¥–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ç—á–µ—Ç—ã
	missingPlayers := findMissingPlayers(allPlayers, reportedPlayers)

	if len(missingPlayers) == 0 {
		return c.Send(fmt.Sprintf("–í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç—ã –ø–æ –ª–æ–∫–∞—Ü–∏–∏ %s!", location))
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
	var result strings.Builder
	result.WriteString(fmt.Sprintf("üìä <b>–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è %s</b>\n", location))
	result.WriteString(fmt.Sprintf("–ì–∏–ª—å–¥–∏—è: %s\n", guildName))
	result.WriteString(fmt.Sprintf("–ù–µ –æ—Ç—á–∏—Ç–∞–ª–∏—Å—å (%d):\n\n", len(missingPlayers)))

	for i, player := range missingPlayers {
		result.WriteString(fmt.Sprintf("%d. %s\n", i+1, player))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–ø–æ–º–Ω–∏—Ç—å"
	menu := &telebot.ReplyMarkup{}
	btn := menu.Text("–ù–∞–ø–æ–º–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞–º")
	menu.Reply(menu.Row(btn))

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–æ–º–Ω–∏—Ç—å"
	c.Set("missing_players", missingPlayers)

	return c.Send(result.String(), menu, telebot.ModeHTML)
}

func showAllMissingReports(c telebot.Context, db *database.Database, guildName string, allPlayers []string) error {
	locations := []string{"T1", "T2", "T3", "T4", "B1", "B2", "B3", "B4", "F1", "F2"}

	var result strings.Builder
	result.WriteString(fmt.Sprintf("üìã <b>–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è –≥–∏–ª—å–¥–∏–∏ %s</b>\n\n", guildName))

	anyMissing := false

	for _, loc := range locations {
		rows, err := db.Query(`
            SELECT DISTINCT u.game_nickname
            FROM battle_results b
            JOIN users u ON b.user_id = u.id
            WHERE b.guild_name = $1 AND b.location = $2 AND b.battle_date = CURRENT_DATE
        `, guildName, loc)

		if err != nil {
			continue
		}

		var reportedPlayers []string
		for rows.Next() {
			var nickname string
			if err := rows.Scan(&nickname); err != nil {
				continue
			}
			reportedPlayers = append(reportedPlayers, nickname)
		}
		rows.Close()

		missingPlayers := findMissingPlayers(allPlayers, reportedPlayers)

		if len(missingPlayers) > 0 {
			anyMissing = true
			result.WriteString(fmt.Sprintf("üìç <b>%s</b> (%d):\n", loc, len(missingPlayers)))
			result.WriteString(strings.Join(missingPlayers, ", "))
			result.WriteString("\n\n")
		}
	}

	if !anyMissing {
		return c.Send("üéâ –í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç—ã –ø–æ –≤—Å–µ–º –ª–æ–∫–∞—Ü–∏—è–º!")
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏
	menu := &telebot.ReplyMarkup{}
	var buttons []telebot.Btn
	for _, loc := range locations {
		buttons = append(buttons, menu.Text("/missingreports"+loc))
	}
	menu.Reply(menu.Split(3, buttons)...)

	return c.Send(result.String(), menu, telebot.ModeHTML)
}

func findMissingPlayers(allPlayers, reportedPlayers []string) []string {
	reportedMap := make(map[string]bool)
	for _, p := range reportedPlayers {
		reportedMap[p] = true
	}

	var missing []string
	for _, p := range allPlayers {
		isReported := reportedMap[p]
		if !isReported {
			missing = append(missing, p)
		}
	}
	return missing
}
