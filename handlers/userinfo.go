package handlers

import (
	"database/sql"
	"fmt"
	"github.com/gvg-bot/models"
	"strings"

	"github.com/gvg-bot/database"
	"gopkg.in/telebot.v3"
)

func handleUserInfo(c telebot.Context, db *database.Database) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
	var user models.User
	err := db.QueryRow(`
        SELECT guild_role FROM users WHERE telegram_id = $1
    `, c.Sender().ID).Scan(&user.GuildRole)

	if err != nil || user.GuildRole != "owner" {
		return c.Send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
	}

	// –§–æ—Ä–º–∞—Ç: /userinfo [–Ω–∏–∫]
	args := strings.Split(c.Message().Text, " ")
	if len(args) < 2 {
		return showAllUsers(c, db)
	}

	nickname := strings.Join(args[1:], " ")
	return showUserDetails(c, db, nickname)
}

func showAllUsers(c telebot.Context, db *database.Database) error {
	rows, err := db.Query(`
        SELECT game_nickname, guild_name, guild_role 
        FROM users 
        ORDER BY guild_name, guild_role DESC, game_nickname
    `)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
	}
	defer rows.Close()

	var result strings.Builder
	result.WriteString("üìä <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n")

	currentGuild := ""
	for rows.Next() {
		var nickname, guild, role string
		if err := rows.Scan(&nickname, &guild, &role); err != nil {
			continue
		}

		if guild != currentGuild {
			currentGuild = guild
			result.WriteString(fmt.Sprintf("\nüè∞ <b>–ì–∏–ª—å–¥–∏—è: %s</b>\n", guild))
		}

		roleEmoji := "üë§"
		switch role {
		case "owner":
			roleEmoji = "üëë"
		case "leader":
			roleEmoji = "‚≠ê"
		case "officer":
			roleEmoji = "üîπ"
		}

		result.WriteString(fmt.Sprintf("%s %s (%s)\n", roleEmoji, nickname, role))
	}

	result.WriteString("\n‚ÑπÔ∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π: /userinfo –Ω–∏–∫")

	return c.Send(result.String(), telebot.ModeHTML)
}

func showUserDetails(c telebot.Context, db *database.Database, nickname string) error {
	var user models.User
	err := db.QueryRow(`
        SELECT game_nickname, nine_digit_code, guild_name, guild_role, is_active, telegram_id
        FROM users WHERE game_nickname = $1
    `, nickname).Scan(&user.GameNickname, &user.NineDigitCode, &user.GuildName, &user.GuildRole, &user.IsActive, &user.TelegramID)

	if err != nil {
		if err == sql.ErrNoRows {
			return c.Send(fmt.Sprintf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω.", nickname))
		}
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
	}

	activeStatus := "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
	if !user.IsActive {
		activeStatus = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
	}

	roleTitle := map[string]string{
		"owner":   "–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ üëë",
		"leader":  "–õ–∏–¥–µ—Ä –≥–∏–ª—å–¥–∏–∏ ‚≠ê",
		"officer": "–û—Ñ–∏—Ü–µ—Ä üîπ",
		"member":  "–£—á–∞—Å—Ç–Ω–∏–∫ üë§",
	}[user.GuildRole]

	msg := fmt.Sprintf(`
üîç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>

üìõ <b>–ù–∏–∫–Ω–µ–π–º:</b> %s
üî¢ <b>–ö–æ–¥:</b> %s
üè∞ <b>–ì–∏–ª—å–¥–∏—è:</b> %s
üéñÔ∏è <b>–†–æ–ª—å:</b> %s
%s
üÜî <b>Telegram ID:</b> %d
`,
		user.GameNickname,
		user.NineDigitCode,
		user.GuildName,
		roleTitle,
		activeStatus,
		user.TelegramID)

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
	menu := &telebot.ReplyMarkup{}

	// –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
	if user.GuildRole != "owner" {
		if user.IsActive {
			btnDeactivate := menu.Text("–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
			menu.Reply(menu.Row(btnDeactivate))
			c.Set("deactivate_user", user.GameNickname)
		} else {
			btnActivate := menu.Text("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
			menu.Reply(menu.Row(btnActivate))
			c.Set("activate_user", user.GameNickname)
		}

		if user.GuildRole != "leader" {
			btnPromote := menu.Text("–ü–æ–≤—ã—Å–∏—Ç—å")
			menu.Reply(menu.Row(btnPromote))
			c.Set("promote_user", user.GameNickname)
		}
	}

	return c.Send(msg, menu, telebot.ModeHTML)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
func InitUserInfoHandlers(bot *telebot.Bot, db *database.Database) {
	bot.Handle(&telebot.Btn{Text: "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"}, func(c telebot.Context) error {
		nickname, ok := c.Get("deactivate_user").(string)
		if !ok {
			return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		}

		_, err := db.Exec("UPDATE users SET is_active = FALSE WHERE game_nickname = $1", nickname)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		}

		return c.Send(fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", nickname))
	})

	bot.Handle(&telebot.Btn{Text: "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"}, func(c telebot.Context) error {
		nickname, ok := c.Get("activate_user").(string)
		if !ok {
			return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		}

		_, err := db.Exec("UPDATE users SET is_active = TRUE WHERE game_nickname = $1", nickname)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		}

		return c.Send(fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", nickname))
	})

	bot.Handle(&telebot.Btn{Text: "–ü–æ–≤—ã—Å–∏—Ç—å"}, func(c telebot.Context) error {
		nickname, ok := c.Get("promote_user").(string)
		if !ok {
			return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		var currentRole string
		err := db.QueryRow("SELECT guild_role FROM users WHERE game_nickname = $1", nickname).Scan(&currentRole)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		}

		newRole := "officer"
		if currentRole == "member" {
			newRole = "officer"
		} else if currentRole == "officer" {
			newRole = "leader"
		}

		_, err = db.Exec("UPDATE users SET guild_role = $1 WHERE game_nickname = $2", newRole, nickname)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		}

		return c.Send(fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–æ–≤—ã—à–µ–Ω –¥–æ %s.", nickname, newRole))
	})
}
